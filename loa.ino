
#include <WiFi.h>
#include <WebServer.h>
#include <EEPROM.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include "Audio.h" 
#include <TFT_eSPI.h>  
#include <SPI.h>
#include "maqr.c"



#define I2S_DOUT 25  // GPIO k·∫øt n·ªëi v·ªõi DIN c·ªßa MAX98357A
#define I2S_BCLK 27  // GPIO k·∫øt n·ªëi v·ªõi BCLK c·ªßa MAX98357A
#define I2S_LRC  26  // GPIO k·∫øt n·ªëi v·ªõi LRC c·ªßa MAX98357A

#define EEPROM_SIZE 96
#define SSID_ADDR 0
#define PASS_ADDR 32
#define MAX_LENGTH 32
#define LED_PIN 13  // Ch√¢n LED
TFT_eSPI tft = TFT_eSPI();
Audio audio;
String googleTTSBaseURL = "http://translate.google.com/translate_tts?ie=UTF-8&client=tw-ob&q=";
String googleTTSLang = "&tl=vi";

WebServer server(80);
bool configMode = false;

String serverURL = "http://192.168.0.106:4000/transaction/save-transaction";
String lastTransactionID = "";

// L∆∞u WiFi v√†o EEPROM
void saveWiFiConfig(const char* ssid, const char* pass) {
    EEPROM.begin(EEPROM_SIZE);
    EEPROM.writeBytes(SSID_ADDR, ssid, MAX_LENGTH);
    EEPROM.writeBytes(PASS_ADDR, pass, MAX_LENGTH);
    EEPROM.commit();
    EEPROM.end();
}

// ƒê·ªçc WiFi t·ª´ EEPROM
void loadWiFiConfig(char* ssid, char* pass) {
    EEPROM.begin(EEPROM_SIZE);
    EEPROM.readBytes(SSID_ADDR, ssid, MAX_LENGTH);
    EEPROM.readBytes(PASS_ADDR, pass, MAX_LENGTH);
    EEPROM.end();
    ssid[MAX_LENGTH - 1] = '\0';
    pass[MAX_LENGTH - 1] = '\0';
}

// HTML nh·∫≠p WiFi
String getHTML() {
    return "<!DOCTYPE html>"
           "<html><head><meta charset='UTF-8'><title>C·∫•u h√¨nh WiFi</title></head>"
           "<body><h2>C·∫•u h√¨nh WiFi</h2>"
           "<form action='/save' method='POST'>"
           "SSID: <input type='text' name='ssid'><br>"
           "Password: <input type='password' name='pass'><br>"
           "<input type='submit' value='L∆∞u WiFi'>"
           "</form>"
           "<br><a href='/clear'><button>X√≥a WiFi</button></a>"
           "</body></html>";
}

// X·ª≠ l√Ω l∆∞u WiFi
void handleSaveWiFi() {
    if (server.hasArg("ssid") && server.hasArg("pass")) {
        String ssid = server.arg("ssid");
        String pass = server.arg("pass");
        saveWiFiConfig(ssid.c_str(), pass.c_str());

        server.send(200, "text/html", "<h3>ƒê√£ l∆∞u! ESP s·∫Ω kh·ªüi ƒë·ªông l·∫°i...</h3>");
        delay(2000);
        ESP.restart();
    } else {
        server.send(400, "text/html", "<h3>Thi·∫øu th√¥ng tin!</h3>");
    }
}

// X√≥a WiFi
void clearWiFiConfig() {
    EEPROM.begin(EEPROM_SIZE);
    for (int i = 0; i < EEPROM_SIZE; i++) {
        EEPROM.write(i, 0);
    }
    EEPROM.commit();
    EEPROM.end();
    server.send(200, "text/html", "<h3>ƒê√£ x√≥a WiFi! ESP s·∫Ω kh·ªüi ƒë·ªông l·∫°i...</h3>");
    delay(2000);
    ESP.restart();
}

// Portal c·∫•u h√¨nh WiFi
void startWiFiConfigPortal() {
    Serial.println("ƒêang ph√°t WiFi c·∫•u h√¨nh...");
    WiFi.softAP("ESP32_Setup");
    server.on("/", []() { server.send(200, "text/html", getHTML()); });
    server.on("/save", HTTP_POST, handleSaveWiFi);
    server.on("/clear", HTTP_GET, clearWiFiConfig);
    server.begin();

    configMode = true;
    Serial.println("Truy c·∫≠p 192.168.4.1 ƒë·ªÉ c√†i ƒë·∫∑t WiFi");

    unsigned long startTime = millis();
    while (millis() - startTime < 180000) {
        server.handleClient();
    }

    Serial.println("H·∫øt th·ªùi gian c·∫•u h√¨nh, kh·ªüi ƒë·ªông l·∫°i!");
    ESP.restart();
}

unsigned long displayStartTime = 0; // L∆∞u th·ªùi gian b·∫Øt ƒë·∫ßu hi·ªÉn th·ªã
bool displayingAmount = false;      // Tr·∫°ng th√°i ƒëang hi·ªÉn th·ªã s·ªë ti·ªÅn
bool audioPlaying = false;          // Tr·∫°ng th√°i √¢m thanh ƒëang ph√°t
unsigned long audioEndTime = 0;  // L∆∞u th·ªùi gian √¢m thanh k·∫øt th√∫c
void playAudioFromGoogleTTS(String text) {
    text.replace(" ", "%20");
    if (text.length() > 100) {
        text = text.substring(0, 100);  // Gi·ªõi h·∫°n ƒë·ªô d√†i chu·ªói
    }
    String audioURL = googleTTSBaseURL + text + googleTTSLang;
    
    Serial.println("üîä Ph√°t √¢m thanh t·ª´: " + audioURL);
    
    audio.connecttohost(audioURL.c_str());
    audioPlaying = true;  // ƒê√°nh d·∫•u tr·∫°ng th√°i ƒëang ph√°t √¢m thanh
}

void setup() {
    Serial.begin(115200);
    audio.setPinout(I2S_BCLK, I2S_LRC, I2S_DOUT);
    audio.setVolume(100);
    pinMode(LED_PIN, OUTPUT);
    digitalWrite(LED_PIN, LOW);  // T·∫Øt LED l√∫c ƒë·∫ßu
     tft.init();
    tft.setRotation(2);
    tft.fillScreen(TFT_BLACK);

    tft.invertDisplay(false);
    tft.setSwapBytes(true);

    // K√≠ch th∆∞·ªõc m√†n h√¨nh
    int screen_width = 240;
    int screen_height = 320;

    // K√≠ch th∆∞·ªõc ·∫£nh
    int image_width = 240;
    int image_height = 240;

    // T√≠nh to√°n v·ªã tr√≠ cƒÉn gi·ªØa
    int x = (screen_width - image_width) / 2;
    int y = 0;

    // V·∫Ω ·∫£nh t·∫°i v·ªã tr√≠ cƒÉn gi·ªØa
    tft.pushImage(x, y, image_width, image_height, (uint16_t*)gImage_maqr);

    char savedSSID[MAX_LENGTH] = "";
    char savedPass[MAX_LENGTH] = "";
    loadWiFiConfig(savedSSID, savedPass);

    WiFi.begin(savedSSID, savedPass);
    Serial.print("ƒêang k·∫øt n·ªëi WiFi...");
    int count = 0;

    while (WiFi.status() != WL_CONNECTED && count < 15) {
        digitalWrite(LED_PIN, count % 2);  // Nh√°y LED
        delay(500);
        Serial.print(".");
        count++;
    }

    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("\nKh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c, v√†o ch·∫ø ƒë·ªô c·∫•u h√¨nh WiFi!");
        startWiFiConfigPortal();
    } else {
        Serial.println("\nK·∫øt n·ªëi WiFi th√†nh c√¥ng!");
        Serial.print("ƒê·ªãa ch·ªâ IP: ");
        Serial.println(WiFi.localIP());
        digitalWrite(LED_PIN, HIGH);  // B·∫≠t LED khi k·∫øt n·ªëi th√†nh c√¥ng
    }
}

// G·ª≠i d·ªØ li·ªáu giao d·ªãch l√™n MongoDB
void sendToMongoDB(String id, String transaction_date, String account_number, double amount_in, double amount_out, String bank_brand_name, String transaction_content) {
    if (WiFi.status() == WL_CONNECTED) {
        HTTPClient http;
        http.begin(serverURL);
        http.addHeader("Content-Type", "application/json");

        // T·∫°o JSON ƒë·ªÉ g·ª≠i
        DynamicJsonDocument doc(512);
        doc["id"] = id;
        doc["transaction_date"] = transaction_date;
        doc["account_number"] = account_number;
        doc["amount_in"] = amount_in;
        doc["amount_out"] = amount_out;
        doc["bank_brand_name"] = bank_brand_name;
        doc["transaction_content"] = transaction_content;

        String postData;
        serializeJson(doc, postData);

        Serial.println("D·ªØ li·ªáu g·ª≠i l√™n server:");
        Serial.println(postData);

        int httpResponseCode = http.POST(postData);
        Serial.print("Ph·∫£n h·ªìi t·ª´ server: ");  
        Serial.println(httpResponseCode);
        Serial.println(http.getString());
        http.end();
    } else {
        Serial.println("WiFi ch∆∞a k·∫øt n·ªëi!");
    }
}

void checkForNewTransaction() {
    if (WiFi.status() == WL_CONNECTED) {
        HTTPClient http;
        String apiURL = "https://my.sepay.vn/userapi/transactions/list?account_number=10112003888&limit=1";
        http.begin(apiURL);
        http.addHeader("Authorization", "Bearer C7FEA2GUIRCJEMA9LQABUKTYQH8HNW44MGRDDVMLWIDJGSXA7PLUUXBTSXFZ3OIT");

        int httpResponseCode = http.GET();
        
        if (httpResponseCode > 0) {
            String response = http.getString();

            DynamicJsonDocument doc(2048);
            DeserializationError error = deserializeJson(doc, response);
            if (error) {
                return;
            }

            JsonArray transactions = doc["transactions"];
            if (transactions.size() > 0) {
                JsonObject transaction = transactions[0];
                String id = transaction["id"].as<String>();
                
                double amountIn = transaction["amount_in"].as<const char*>() ? atof(transaction["amount_in"].as<const char*>()) : 0;

                if (id != lastTransactionID) {
                    lastTransactionID = id;

                    sendToMongoDB(
                        id,
                        transaction["transaction_date"].as<String>(),
                        transaction["account_number"].as<String>(),
                        amountIn,
                        transaction["amount_out"].as<double>(),
                        transaction["bank_brand_name"].as<String>(),
                        transaction["transaction_content"].as<String>()
                    );

                    if (amountIn > 0) {
                        String ttsMessage = "%C4%90%C3%A3+nh%E1%BA%ADn+%C4%91%C6%B0%E1%BB%A3c" + String(amountIn, 0) + "%C4%90%E1%BB%93ng";
                        playAudioFromGoogleTTS(ttsMessage);

                        // Hi·ªÉn th·ªã s·ªë ti·ªÅn tr√™n m√†n h√¨nh TFT
                        tft.fillRect(0, 250, 240, 70, TFT_BLACK);
                        tft.setTextColor(TFT_WHITE, TFT_BLACK);
                        tft.setTextSize(3);
                        String amountText = "+" + String(amountIn, 0) + " VND";
                        int textWidth = tft.textWidth(amountText); 
                        int xPos = (240 - textWidth) / 2;
                        int yPos = 270;  
                        tft.setCursor(xPos, yPos);
                        tft.print(amountText);

                        // L∆∞u th·ªùi gian b·∫Øt ƒë·∫ßu hi·ªÉn th·ªã
                        displayStartTime = millis();
                        displayingAmount = true;
                    }
                } else {
                    delay(10000);
                    Serial.println("‚ö†Ô∏è Giao d·ªãch ƒë√£ t·ªìn t·∫°i, kh√¥ng ph√°t √¢m thanh.");
                    audio.stopSong();
                    tft.fillRect(0, 250, 240, 70, TFT_BLACK);
                }
            }
        } else {
            Serial.print("L·ªói k·∫øt n·ªëi API: ");
            Serial.println(httpResponseCode);
        }
        http.end();
    }
}

// Ki·ªÉm tra tr·∫°ng th√°i √¢m thanh
void audio_eof_mp3(const char *info) {
    Serial.println("üîä √Çm thanh ƒë√£ k·∫øt th√∫c");
    audioPlaying = false; // ƒê√°nh d·∫•u √¢m thanh ƒë√£ k·∫øt th√∫c
}
void loop() {
    static unsigned long lastCheckTime = 0;
    const int reconnectTimeout = 10000;
    
    if (millis() - lastCheckTime > reconnectTimeout) {
        lastCheckTime = millis();
        checkForNewTransaction();
    }
    
    // Ki·ªÉm tra xem √¢m thanh c√≤n ƒëang ph√°t kh√¥ng
    if (audioPlaying && !audio.isRunning()) {
        Serial.println("üîä √Çm thanh ƒë√£ ph√°t xong!");
        audioPlaying = false;
        audioEndTime = millis();  // L∆∞u th·ªùi gian k·∫øt th√∫c ph√°t √¢m
    }
    // X√≥a s·ªë ti·ªÅn ch·ªâ khi ƒë√£ ƒë·ªß 15 gi√¢y v√† √¢m thanh ƒë√£ ph√°t xong √≠t nh·∫•t 3 gi√¢y
    if (displayingAmount && millis() - displayStartTime > 10000 && millis() - audioEndTime > 2000) {
        Serial.println("üñ•Ô∏è X√≥a hi·ªÉn th·ªã s·ªë ti·ªÅn...");
        tft.fillRect(0, 250, 240, 70, TFT_BLACK);
        displayingAmount = false;
    }

    audio.loop(); // Ti·∫øp t·ª•c ph√°t √¢m thanh
}
